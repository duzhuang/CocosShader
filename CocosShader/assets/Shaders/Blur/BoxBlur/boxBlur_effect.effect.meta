{
  "ver": "1.0.25",
  "uuid": "7155d627-48ff-4808-ad59-13e772dba1db",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 blurOffset;\nvec4 BoxBlur(vec4 mainColor,vec2 uv){\n  vec4 dir = vec4(1.0,1.0,-1.0,0.0)* blurOffset.xyxy;\n  vec4 s1 = texture2D(texture, uv + dir.xw)*2.0;\n  vec4 s2 = texture2D(texture, uv + dir.zw)*2.0;\n  vec4 s3 = texture2D(texture, uv + dir.wy)*2.0;\n  vec4 s4 = texture2D(texture, uv + dir.zw)*2.0;\n  vec4 s5 = texture2D(texture, uv + dir.wy);\n  vec4 s6 = texture2D(texture, uv + dir.ww);\n  vec4 s7 = texture2D(texture, uv + dir.xy);\n  vec4 s8 = texture2D(texture, uv + dir.xw);\n  mainColor = mainColor * 4.0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8;\n  return mainColor*(1.0/16.0);\n}\nvoid main () {\n  vec2 uv = v_uv0;;\n  vec4 mainColor = texture2D(texture, uv);\n  #if USE_BOXBLUR\n    mainColor = BoxBlur(mainColor,uv);\n  #endif\n  mainColor *= v_color;\n  ALPHA_TEST(mainColor);\n  gl_FragColor = mainColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform BOXBLURPARAMS{\n  vec2 blurOffset;\n};\nvec4 BoxBlur(vec4 mainColor,vec2 uv){\n  vec4 dir = vec4(1.0,1.0,-1.0,0.0)* blurOffset.xyxy;\n  vec4 s1 = texture2D(texture, uv + dir.xw)*2.0;\n  vec4 s2 = texture2D(texture, uv + dir.zw)*2.0;\n  vec4 s3 = texture2D(texture, uv + dir.wy)*2.0;\n  vec4 s4 = texture2D(texture, uv + dir.zw)*2.0;\n  vec4 s5 = texture2D(texture, uv + dir.wy);\n  vec4 s6 = texture2D(texture, uv + dir.ww);\n  vec4 s7 = texture2D(texture, uv + dir.xy);\n  vec4 s8 = texture2D(texture, uv + dir.xw);\n  mainColor = mainColor * 4.0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8;\n  return mainColor*(1.0/16.0);\n}\nvoid main () {\n  vec2 uv = v_uv0;;\n  vec4 mainColor = texture2D(texture, uv);\n  #if USE_BOXBLUR\n    mainColor = BoxBlur(mainColor,uv);\n  #endif\n  mainColor *= v_color;\n  ALPHA_TEST(mainColor);\n  gl_FragColor = mainColor;\n}"
      }
    }
  ],
  "subMetas": {}
}