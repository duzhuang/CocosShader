// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        blurRadius: { value: 0.1 }        
        radialCenter: { value: [0.5,0.5] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;
  
  uniform RADIALBLURPARAMS{
    vec2 radialCenter;
    float blurRadius;        
  };

  const float iteration = 10.0;

  vec4 RadialBlur(vec4 mainColor, vec2 uv){
    vec2 blurVector = (radialCenter - uv) * blurRadius;
    for (int i = 0; i < int(iteration); i++) {  
      mainColor += texture2D(texture, uv);    
      uv += blurVector;
    }
    return mainColor/iteration;
  }

  void main () {    

    vec2 uv = v_uv0;    
    vec4 mainColor = texture2D(texture, uv);

    #if USE_RADIALBLUR
      mainColor = RadialBlur(mainColor, uv);
    #endif

    mainColor *= v_color;

    ALPHA_TEST(mainColor);

    gl_FragColor = mainColor;
  }
}%
