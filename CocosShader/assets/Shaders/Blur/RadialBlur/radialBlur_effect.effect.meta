{
  "ver": "1.0.25",
  "uuid": "79f3ac83-2aae-4997-82e5-9a6224ea1e1e",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 radialCenter;\nuniform float blurRadius;\nconst float iteration = 10.0;\nvec4 RadialBlur(vec4 mainColor, vec2 uv){\n  vec2 blurVector = (radialCenter - uv) * blurRadius;\n  for (int i = 0; i < int(iteration); i++) {\n    mainColor += texture2D(texture, uv);\n    uv += blurVector;\n  }\n  return mainColor/iteration;\n}\nvoid main () {\n  vec2 uv = v_uv0;\n  vec4 mainColor = texture2D(texture, uv);\n  #if USE_RADIALBLUR\n    mainColor = RadialBlur(mainColor, uv);\n  #endif\n  mainColor *= v_color;\n  ALPHA_TEST(mainColor);\n  gl_FragColor = mainColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform RADIALBLURPARAMS{\n  vec2 radialCenter;\n  float blurRadius;\n};\nconst float iteration = 10.0;\nvec4 RadialBlur(vec4 mainColor, vec2 uv){\n  vec2 blurVector = (radialCenter - uv) * blurRadius;\n  for (int i = 0; i < int(iteration); i++) {\n    mainColor += texture2D(texture, uv);\n    uv += blurVector;\n  }\n  return mainColor/iteration;\n}\nvoid main () {\n  vec2 uv = v_uv0;\n  vec4 mainColor = texture2D(texture, uv);\n  #if USE_RADIALBLUR\n    mainColor = RadialBlur(mainColor, uv);\n  #endif\n  mainColor *= v_color;\n  ALPHA_TEST(mainColor);\n  gl_FragColor = mainColor;\n}"
      }
    }
  ],
  "subMetas": {}
}