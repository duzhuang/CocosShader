// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        subTexture: { value: gray }
        tranSize: { value: 0.1 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
  #endif

  uniform sampler2D subTexture;

  uniform TRANSITIONPARAMS{
    float tranSize;
  };
  
  vec4 linearTransition(vec4 mainColor,vec4 mixColor,vec2 uv,float progression){
    float f =  uv.y * (1.0-tranSize) + tranSize - (progression * (1.0 + tranSize));
    float smValue = smoothstep(0.0, -tranSize, f);
    mainColor = mix(mainColor, mixColor, smValue);
    return mainColor;
  }

  void main () {
    
    vec4 mainColor = texture2D(texture, v_uv0);
    vec4 mixColor = texture2D(subTexture, v_uv0);
    float progression = cc_time.x;

    mainColor = linearTransition(mainColor, mixColor,v_uv0, progression);

    ALPHA_TEST(mainColor);

    gl_FragColor = mainColor;
  }
}%
