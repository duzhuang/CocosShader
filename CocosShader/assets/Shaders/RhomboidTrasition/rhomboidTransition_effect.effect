// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        subTexture: { value: gray }
        speed: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;
  uniform sampler2D subTexture;

  uniform RHOMBODPARAMS{
    float speed;
  };

  const float tranSize = 32.0;
  vec4 rhomboidTransition(vec4 mainColor, vec4 subCololr,vec2 uv) {    
    float xFraction = fract(gl_FragCoord.x/tranSize);
    float yFraction = fract(gl_FragCoord.y/tranSize);

    float xDistance = abs(xFraction - 0.5);
    float yDistance = abs(yFraction - 0.5);

    if(xDistance + yDistance + uv.x + uv.y < cc_time.x*speed) {
      mainColor = subCololr;
    }
    return mainColor;
  }

  void main () {   

    vec2 uv = v_uv0;
    vec4 mainColor = texture2D(texture, v_uv0);
    vec4 subColor = texture2D(subTexture, v_uv0);

    mainColor = rhomboidTransition(mainColor,subColor,uv);

    mainColor *= v_color;

    ALPHA_TEST(mainColor);

    gl_FragColor = mainColor;
  }
}%
