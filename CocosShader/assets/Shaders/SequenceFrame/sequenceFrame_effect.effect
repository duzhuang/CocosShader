// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        speed: { value: 1.0 }
        vAmount:  { value: 1.0 }
        hAmount:  { value: 1.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
  #endif

  uniform SEQUECCEPARAMS{
    float speed;
    float vAmount;
    float hAmount;
  };

  const float STAGE = 2.0;

  vec2 sequenceUV(vec2 uv){
    float time = floor(cc_time.x * speed * 10.0);
    float row = mod(floor(time / hAmount),hAmount) ;
    uv.x += row;
    uv.x /= hAmount;
    float colum = mod(floor(time / (hAmount * vAmount * STAGE)),vAmount);
    uv.y += colum;
    uv.y /= vAmount;
    return uv;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 uv = v_uv0;

    #if USE_TEXTURE
      uv = sequenceUV(uv);     
      o = texture2D(texture, uv);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
