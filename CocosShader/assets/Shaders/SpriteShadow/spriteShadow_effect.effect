// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - name: shadow
      vert: shadow-vs
      frag: shadow-fs
      rasterizerState:
        cullMode: none
      blendState:
        targets:
        - blend: true         
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        offsetX: {value: 0.1, editor: { tooltip: "阴影的偏移量" }}
        offsetY: {value: 0.1, editor: { tooltip: "阴影的偏移量" }}
    - name: normal
      vert: vs
      frag: fs
      rasterizerState:
        cullMode: none
      blendState:
        targets:
        - blend: true         
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }      
}%


CCProgram shadow-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
  #endif

  uniform SHADOWPARAMS{
    float offsetX;
    float offsetY;      
  };

  void main(){
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
      pos = cc_matViewProj * cc_matWorld * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif    

    v_color = a_color;

    pos.x += offsetX;
    pos.y += offsetY;     

    gl_Position = pos;
  }
}%

CCProgram shadow-fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
  #endif

  #if USE_TINT
  #endif

  void main () {    
    vec4 resultColor = vec4(1.0);

    #if USE_TEXTURE 
      resultColor = texture2D(texture, v_uv0);
      if(resultColor.a >= 0.5){
        resultColor.r = 0.0;
        resultColor.g = 0.0;
        resultColor.b = 0.0;
        resultColor.a = 0.5;
      }
    #endif
  
    ALPHA_TEST(resultColor);

    gl_FragColor = resultColor;
  }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
  #endif  

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;


  uniform Constant{
    vec4 _color;
  };

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
