// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        sweepColor: { value: [0,0,0,255], editor: {type: color}}
        sweepSpeed: { value: 0.2, inspector: {tooltip: "扫光速度"}}
        sweepSize: { value: 0.1, inspector: {tooltip: "扫光宽度"}}            
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
  #endif

  #if USE_SWEEP
    uniform SWEEPPARAM{
      vec4 sweepColor;
      float sweepSpeed;
      float sweepSize;      
    };
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec4 a_color = v_color;
    vec2 uv = v_uv0;

    #if USE_TEXTURE
      if(abs( tan(cc_time.x) * sweepSpeed - (uv.x*2.0+uv.y)/2.0 ) < sweepSize ) {
           a_color =  sweepColor  ;
      }  
      CCTexture(texture, v_uv0, o);
    #endif

    o *= a_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
